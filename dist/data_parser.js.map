{"version":3,"sources":["data_parser.js"],"names":["Parser","ConfigStr","options","JSON","parse","err","res","data","format","parseTableData","parseSeriesData","Array","length","columns","result","type","rows","j","clen","key","label","push","text","i","len","item","lines","timeKey","line","temp","target","datapoints","forEach"],"mappings":"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","sourcesContent":["export class Parser {\n    parseQueryConfig(ConfigStr) {\n        let options;\n        try {\n            options = JSON.parse(ConfigStr);\n        } catch (err) {\n            options = {};\n        }\n        return options;\n    }\n    parseQueryResponse(res, options) {\n        if (!res.data) {\n            return { data: [] };\n        }\n\n        let format = options.format;\n\n        if (format === 'table') {\n            return this.parseTableData(res.data, options);\n        } else if (format === 'series') {\n            return this.parseSeriesData(res.data, options);\n        } else {\n            return { data: [] };\n        }\n    }\n\n    parseTableData(data, options) {\n        if (!(data instanceof Array) || data.length === 0) {\n            return { data: [] };\n        }\n        let columns = options.columns;\n        if (!(columns instanceof Array) || columns.length === 0) {\n            return { data: [] };\n        }\n        let result = {\n            type: 'table',\n            columns: [],\n            rows: []\n        };\n        for (let j = 0, clen = columns.length; j < clen; j++) {\n            let key = columns[j].key;\n            let label = columns[j].label;\n            result.columns.push({ text: label });\n            for (let i = 0, len = data.length; i < len; i++) {\n                if (!result.rows[i]) result.rows[i] = [];\n                let item = data[i];\n                result.rows[i].push(item[key]);\n            }\n        }\n        return { data: [result] };\n    }\n    parseSeriesData(data, options) {\n        if (!(data instanceof Array) || data.length === 0) {\n            return { data: [] };\n        }\n        let lines = options.lines;\n        if (!lines || !lines.timeKey || !(lines.line instanceof Array) || lines.line.length === 0) {\n            return { data: [] };\n        }\n        let timeKey = lines.timeKey;\n        let result = [];\n        for (let i = 0, len = lines.line.length; i < len; i++) {\n            let temp = {\n                target: lines.line[i].label,\n                datapoints: []\n            };\n            let key = lines.line[i].key;\n            data.forEach((item) => temp.datapoints.push([item[key], item[timeKey]]));\n            result.push(temp);\n        }\n        return { data: result };\n    }\n}"],"file":"data_parser.js"}