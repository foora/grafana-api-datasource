{"version":3,"sources":["data_parser.js"],"names":["Parser","ConfigStr","options","JSON","parse","err","res","data","format","parseTableData","Array","length","columns","result","type","rows","j","clen","key","label","push","text","i","len","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAAaA,M;;;;;;;qDACQC,S,EAAW;AACxB,4BAAIC,gBAAJ;AACA,4BAAI;AACAA,sCAAUC,KAAKC,KAAL,CAAWH,SAAX,CAAV;AACH,yBAFD,CAEE,OAAOI,GAAP,EAAY;AACVH,sCAAU,EAAV;AACH;AACD,+BAAOA,OAAP;AACH;;;uDACkBI,G,EAAKJ,O,EAAS;AAC7B,4BAAI,CAACI,GAAL,EAAU;AACN,mCAAO,EAAEC,MAAM,EAAR,EAAP;AACH;;AAED,4BAAIC,SAASN,QAAQM,MAArB;;AAEA,4BAAIA,WAAW,OAAf,EAAwB;AACpB,mCAAO,KAAKC,cAAL,CAAoBH,GAApB,EAAyBJ,OAAzB,CAAP;AACH,yBAFD,MAEO;AACH,mCAAO,EAAEK,MAAM,EAAR,EAAP;AACH;AACJ;;;mDAEcA,I,EAAML,O,EAAS;AAC1B,4BAAI,EAAEK,gBAAgBG,KAAlB,KAA4BH,KAAKI,MAAL,KAAgB,CAAhD,EAAmD;AAC/C,mCAAO,EAAEJ,MAAM,EAAR,EAAP;AACH;AACD,4BAAIK,UAAUV,QAAQU,OAAtB;AACA,4BAAIA,QAAQD,MAAR,KAAmB,CAAvB,EAA0B;AACtB,mCAAO,EAAEJ,MAAM,EAAR,EAAP;AACH;AACD,4BAAIM,SAAS;AACTC,kCAAM,OADG;AAETF,qCAAS,EAFA;AAGTG,kCAAM;AAHG,yBAAb;AAKA,6BAAK,IAAIC,IAAI,CAAR,EAAWC,OAAOL,QAAQD,MAA/B,EAAuCK,IAAIC,IAA3C,EAAiDD,GAAjD,EAAsD;AAClD,gCAAIE,MAAMN,QAAQI,CAAR,EAAWE,GAArB;AACA,gCAAIC,QAAQP,QAAQI,CAAR,EAAWG,KAAvB;AACAN,mCAAOD,OAAP,CAAeQ,IAAf,CAAoB,EAAEC,MAAMF,KAAR,EAApB;AACA,iCAAK,IAAIG,IAAI,CAAR,EAAWC,MAAMhB,KAAKI,MAA3B,EAAmCW,IAAIC,GAAvC,EAA4CD,GAA5C,EAAiD;AAC7C,oCAAI,CAACT,OAAOE,IAAP,CAAYO,CAAZ,CAAL,EAAqBT,OAAOE,IAAP,CAAYO,CAAZ,IAAiB,EAAjB;AACrB,oCAAIE,OAAOjB,KAAKe,CAAL,CAAX;AACAT,uCAAOE,IAAP,CAAYO,CAAZ,EAAeF,IAAf,CAAoBI,KAAKN,GAAL,CAApB;AACH;AACJ;AACD,+BAAO,EAAEX,MAAM,CAACM,MAAD,CAAR,EAAP;AACH","file":"data_parser.js","sourcesContent":["export class Parser {\n    parseQueryConfig(ConfigStr) {\n        let options;\n        try {\n            options = JSON.parse(ConfigStr);\n        } catch (err) {\n            options = {};\n        }\n        return options;\n    }\n    parseQueryResponse(res, options) {\n        if (!res) {\n            return { data: [] };\n        }\n\n        let format = options.format;\n\n        if (format === 'table') {\n            return this.parseTableData(res, options);\n        } else {\n            return { data: [] };\n        }\n    }\n\n    parseTableData(data, options) {\n        if (!(data instanceof Array) || data.length === 0) {\n            return { data: [] };\n        }\n        let columns = options.columns;\n        if (columns.length === 0) {\n            return { data: [] };\n        }\n        let result = {\n            type: 'table',\n            columns: [],\n            rows: []\n        };\n        for (let j = 0, clen = columns.length; j < clen; j++) {\n            let key = columns[j].key;\n            let label = columns[j].label;\n            result.columns.push({ text: label });\n            for (let i = 0, len = data.length; i < len; i++) {\n                if (!result.rows[i]) result.rows[i] = [];\n                let item = data[i];\n                result.rows[i].push(item[key]);\n            }\n        }\n        return { data: [result] };\n    }\n}"]}