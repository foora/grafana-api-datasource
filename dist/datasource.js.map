{"version":3,"sources":["datasource.js"],"names":["Parser","ApiDataSource","instanceSettings","$q","backendSrv","templateSrv","q","name","type","url","withCredentials","headers","basicAuth","length","parser","options","queryConfig","parseQueryConfig","targets","Object","keys","path","method","when","data","doRequest","then","res","parseQueryResponse","response","status","message","title","datasourceRequest"],"mappings":";;;;;;;;;;;;;AAASA,kB,gBAAAA,M;;;;;;;;;;;;;;;;;;;;;qCAEIC,a;AACT,uCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACvD,yBAAKC,CAAL,GAASH,EAAT;AACA,yBAAKC,UAAL,GAAkBA,UAAlB;AACA,yBAAKC,WAAL,GAAmBA,WAAnB;AACA,yBAAKE,IAAL,GAAYL,iBAAiBK,IAA7B;AACA,yBAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,yBAAKC,GAAL,GAAWP,iBAAiBO,GAA5B;AACA,yBAAKC,eAAL,GAAuBR,iBAAiBQ,eAAxC;AACA,yBAAKC,OAAL,GAAe;AACX,wCAAgB;AADL,qBAAf;AAGA,wBAAI,OAAOT,iBAAiBU,SAAxB,KAAsC,QAAtC,IAAkDV,iBAAiBU,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AACzF,6BAAKF,OAAL,CAAa,eAAb,IAAgCT,iBAAiBU,SAAjD;AACH;AACD,yBAAKE,MAAL,GAAc,IAAId,MAAJ,EAAd;AACH;;;;0CAEKe,O,EAAS;AAAA;;AACX,4BAAIC,cAAc,KAAKF,MAAL,CAAYG,gBAAZ,CAA6BF,QAAQG,OAAR,CAAgB,CAAhB,EAAmBF,WAAhD,CAAlB;AACA,4BAAIG,OAAOC,IAAP,CAAYJ,WAAZ,EAAyBH,MAAzB,KAAoC,CAApC,IAAyC,CAACG,YAAYK,IAAtD,IAA8D,CAACL,YAAYM,MAA/E,EAAuF;AACnF,mCAAO,KAAKhB,CAAL,CAAOiB,IAAP,CAAY,EAAEC,MAAM,EAAR,EAAZ,CAAP;AACH;AACD,+BAAO,KAAKC,SAAL,CAAe;AAClBhB,iCAAK,KAAKA,GAAL,GAAWO,YAAYK,IADV;AAElBC,oCAAQN,YAAYM;AAFF,yBAAf,EAGJI,IAHI,CAGC,UAACC,GAAD;AAAA,mCAAS,MAAKb,MAAL,CAAYc,kBAAZ,CAA+BD,GAA/B,EAAoCX,WAApC,CAAT;AAAA,yBAHD,CAAP;AAIH;;;qDAEgB;AACb,+BAAO,KAAKS,SAAL,CAAe;AAClBhB,iCAAK,KAAKA,GAAL,GAAW,OADE;AAElBa,oCAAQ;AAFU,yBAAf,EAGJI,IAHI,CAGC,oBAAY;AAChB,gCAAIG,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,uCAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACH;AACJ,yBAPM,CAAP;AAQH;;;8CAESjB,O,EAAS;AACfA,gCAAQL,eAAR,GAA0B,KAAKA,eAA/B;AACAK,gCAAQJ,OAAR,GAAkB,KAAKA,OAAvB;AACA,+BAAO,KAAKP,UAAL,CAAgB6B,iBAAhB,CAAkClB,OAAlC,CAAP;AACH","file":"datasource.js","sourcesContent":["import { Parser } from './data_parser';\n\nexport class ApiDataSource {\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.name = instanceSettings.name;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {\n            'Content-Type': 'application/json'\n        };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n        this.parser = new Parser();\n    }\n\n    query(options) {\n        let queryConfig = this.parser.parseQueryConfig(options.targets[0].queryConfig);\n        if (Object.keys(queryConfig).length === 0 || !queryConfig.path || !queryConfig.method) {\n            return this.q.when({ data: [] });\n        }\n        return this.doRequest({\n            url: this.url + queryConfig.path,\n            method: queryConfig.method\n        }).then((res) => this.parser.parseQueryResponse(res, queryConfig));\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url + '/test',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: 'success', message: 'Data source is working', title: 'Success' };\n            }\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return this.backendSrv.datasourceRequest(options);\n    }\n}"]}