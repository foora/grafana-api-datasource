{"version":3,"sources":["datasource.js"],"names":["ApiDataSource","constructor","instanceSettings","$q","backendSrv","templateSrv","q","name","type","url","withCredentials","headers","basicAuth","length","parser","Parser","query","options","queryConfig","parseQueryConfig","targets","Object","keys","path","method","when","data","requestOptions","toUpperCase","startTime","Date","range","from","_d","getTime","endTime","to","doRequest","then","res","parseQueryResponse","testDatasource","response","status","message","title","datasourceRequest"],"mappings":"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","sourcesContent":["import { Parser } from './data_parser';\n\nexport class ApiDataSource {\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.name = instanceSettings.name;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {\n            'Content-Type': 'application/json'\n        };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n        this.parser = new Parser();\n    }\n\n    query(options) {\n        let queryConfig = this.parser.parseQueryConfig(options.targets[0].queryConfig);\n        if (Object.keys(queryConfig).length === 0 || !queryConfig.path || !queryConfig.method) {\n            return this.q.when({ data: [] });\n        }\n        let requestOptions = {\n            url: this.url + queryConfig.path,\n            method: queryConfig.method\n        };\n        if (queryConfig.method.toUpperCase() !== 'GET') {\n            requestOptions.data = queryConfig.query || {};\n            requestOptions.data.startTime = new Date(options.range.from._d).getTime();\n            requestOptions.data.endTime = new Date(options.range.to._d).getTime();\n        }\n        return this.doRequest(requestOptions).then((res) => this.parser.parseQueryResponse(res, queryConfig));\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url + '/test',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: 'success', message: 'Data source is working', title: 'Success' };\n            }\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return this.backendSrv.datasourceRequest(options);\n    }\n}"],"file":"datasource.js"}