{"version":3,"sources":["datasource.js"],"names":["Parser","ApiDataSource","instanceSettings","$q","backendSrv","templateSrv","q","name","type","url","withCredentials","headers","basicAuth","length","parser","options","queryConfig","parseQueryConfig","targets","Object","keys","path","method","when","data","requestOptions","toUpperCase","query","startTime","Date","range","from","_d","getTime","endTime","to","doRequest","then","res","parseQueryResponse","response","status","message","title","datasourceRequest"],"mappings":";;;;;;;;;;;;;AAASA,MAAAA,M,gBAAAA,M;;;+BAEIC,a;;;AACT,+BAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACvD,eAAKC,CAAL,GAASH,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKE,IAAL,GAAYL,gBAAgB,CAACK,IAA7B;AACA,eAAKC,IAAL,GAAYN,gBAAgB,CAACM,IAA7B;AACA,eAAKC,GAAL,GAAWP,gBAAgB,CAACO,GAA5B;AACA,eAAKC,eAAL,GAAuBR,gBAAgB,CAACQ,eAAxC;AACA,eAAKC,OAAL,GAAe;AACX,4BAAgB;AADL,WAAf;;AAGA,cAAI,OAAOT,gBAAgB,CAACU,SAAxB,KAAsC,QAAtC,IAAkDV,gBAAgB,CAACU,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AACzF,iBAAKF,OAAL,CAAa,eAAb,IAAgCT,gBAAgB,CAACU,SAAjD;AACH;;AACD,eAAKE,MAAL,GAAc,IAAId,MAAJ,EAAd;AACH;;;;gCAEKe,O,EAAS;AAAA;;AACX,gBAAIC,WAAW,GAAG,KAAKF,MAAL,CAAYG,gBAAZ,CAA6BF,OAAO,CAACG,OAAR,CAAgB,CAAhB,EAAmBF,WAAhD,CAAlB;;AACA,gBAAIG,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBH,MAAzB,KAAoC,CAApC,IAAyC,CAACG,WAAW,CAACK,IAAtD,IAA8D,CAACL,WAAW,CAACM,MAA/E,EAAuF;AACnF,qBAAO,KAAKhB,CAAL,CAAOiB,IAAP,CAAY;AAAEC,gBAAAA,IAAI,EAAE;AAAR,eAAZ,CAAP;AACH;;AACD,gBAAIC,cAAc,GAAG;AACjBhB,cAAAA,GAAG,EAAE,KAAKA,GAAL,GAAWO,WAAW,CAACK,IADX;AAEjBC,cAAAA,MAAM,EAAEN,WAAW,CAACM;AAFH,aAArB;;AAIA,gBAAIN,WAAW,CAACM,MAAZ,CAAmBI,WAAnB,OAAqC,KAAzC,EAAgD;AAC5CD,cAAAA,cAAc,CAACD,IAAf,GAAsBR,WAAW,CAACW,KAAZ,IAAqB,EAA3C;AACAF,cAAAA,cAAc,CAACD,IAAf,CAAoBI,SAApB,GAAgC,IAAIC,IAAJ,CAASd,OAAO,CAACe,KAAR,CAAcC,IAAd,CAAmBC,EAA5B,EAAgCC,OAAhC,EAAhC;AACAR,cAAAA,cAAc,CAACD,IAAf,CAAoBU,OAApB,GAA8B,IAAIL,IAAJ,CAASd,OAAO,CAACe,KAAR,CAAcK,EAAd,CAAiBH,EAA1B,EAA8BC,OAA9B,EAA9B;AACH;;AACD,mBAAO,KAAKG,SAAL,CAAeX,cAAf,EAA+BY,IAA/B,CAAoC,UAACC,GAAD;AAAA,qBAAS,KAAI,CAACxB,MAAL,CAAYyB,kBAAZ,CAA+BD,GAA/B,EAAoCtB,WAApC,CAAT;AAAA,aAApC,CAAP;AACH;;;2CAEgB;AACb,mBAAO,KAAKoB,SAAL,CAAe;AAClB3B,cAAAA,GAAG,EAAE,KAAKA,GAAL,GAAW,OADE;AAElBa,cAAAA,MAAM,EAAE;AAFU,aAAf,EAGJe,IAHI,CAGC,UAAAG,QAAQ,EAAI;AAChB,kBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,uBAAO;AAAEA,kBAAAA,MAAM,EAAE,SAAV;AAAqBC,kBAAAA,OAAO,EAAE,wBAA9B;AAAwDC,kBAAAA,KAAK,EAAE;AAA/D,iBAAP;AACH;AACJ,aAPM,CAAP;AAQH;;;oCAES5B,O,EAAS;AACfA,YAAAA,OAAO,CAACL,eAAR,GAA0B,KAAKA,eAA/B;AACAK,YAAAA,OAAO,CAACJ,OAAR,GAAkB,KAAKA,OAAvB;AACA,mBAAO,KAAKP,UAAL,CAAgBwC,iBAAhB,CAAkC7B,OAAlC,CAAP;AACH","sourcesContent":["import { Parser } from './data_parser';\n\nexport class ApiDataSource {\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.name = instanceSettings.name;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {\n            'Content-Type': 'application/json'\n        };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n        this.parser = new Parser();\n    }\n\n    query(options) {\n        let queryConfig = this.parser.parseQueryConfig(options.targets[0].queryConfig);\n        if (Object.keys(queryConfig).length === 0 || !queryConfig.path || !queryConfig.method) {\n            return this.q.when({ data: [] });\n        }\n        let requestOptions = {\n            url: this.url + queryConfig.path,\n            method: queryConfig.method\n        };\n        if (queryConfig.method.toUpperCase() !== 'GET') {\n            requestOptions.data = queryConfig.query || {};\n            requestOptions.data.startTime = new Date(options.range.from._d).getTime();\n            requestOptions.data.endTime = new Date(options.range.to._d).getTime();\n        }\n        return this.doRequest(requestOptions).then((res) => this.parser.parseQueryResponse(res, queryConfig));\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url + '/test',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: 'success', message: 'Data source is working', title: 'Success' };\n            }\n        });\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return this.backendSrv.datasourceRequest(options);\n    }\n}"],"file":"datasource.js"}